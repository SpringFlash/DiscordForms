// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° DISCORD ===

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Discord embed
function createDiscordEmbed(formData) {
  const priorityColors = {
    –ù–∏–∑–∫–∏–π: 0x10b981,
    –°—Ä–µ–¥–Ω–∏–π: 0xf59e0b,
    –í—ã—Å–æ–∫–∏–π: 0xef4444,
  };

  let embedColor = 0x6366f1;
  if (formData.priority && priorityColors[formData.priority]) {
    embedColor = priorityColors[formData.priority];
  }

  const embed = {
    title: `üìù ${currentConfig.title}`,
    color: embedColor,
    fields: [],
    timestamp: new Date().toISOString(),
    footer: {
      text: `${currentConfig.webhookUsername || currentConfig.title}`,
      icon_url:
        currentConfig.webhookAvatarUrl ||
        "https://pngimg.com/uploads/discord/discord_PNG3.png",
    },
  };

  let questionIndex = 1;
  currentConfig.fields.forEach((field) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (
      field.customWebhook &&
      field.customWebhook.enabled &&
      (field.customWebhook.splitLines || field.customWebhook.url)
    ) {
      return;
    }

    const value = formData[field.id];
    if (value !== undefined && value !== "") {
      let displayValue = value;
      let fieldName = `${questionIndex}) ${field.label}:`;

      if (field.type === "checkbox") {
        displayValue = value === "on" ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
      }

      if (typeof displayValue === "string" && displayValue.length > 1024) {
        displayValue = displayValue.substring(0, 1021) + "...";
      }

      questionIndex++;
      embed.fields.push({
        name: fieldName,
        value: displayValue,
        inline: false,
      });
    }
  });

  return embed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function createPlainTextMessage(formData) {
  let message = `**__üìù ${currentConfig.title}__**\n`;

  let questionIndex = 1;
  currentConfig.fields.forEach((field) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (
      field.customWebhook &&
      field.customWebhook.enabled &&
      (field.customWebhook.splitLines || field.customWebhook.url)
    ) {
      return;
    }

    const value = formData[field.id];
    if (value !== undefined && value !== "") {
      let displayValue = value;

      if (field.type === "checkbox") {
        displayValue = value === "on" ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
      }

      message += `**${questionIndex}) ${field.label}:**${
        ["textarea", "computed"].includes(field.type) ? "\n" : " "
      }${displayValue}\n`;
      questionIndex++;
    }
  });
  return message;
}
function getConditionalMessage(formData) {
  if (
    !currentConfig.conditionalMessages ||
    currentConfig.conditionalMessages.length === 0
  ) {
    return currentConfig.customMessage || null;
  }
  for (const condMsg of currentConfig.conditionalMessages) {
    if (condMsg.field && condMsg.value && condMsg.message) {
      const fieldValue = formData[condMsg.field];

      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Å–ª–æ–≤–∏—è "–≤–∫–ª—é—á–∞–µ—Ç"
      let requiredValues = [];
      try {
        requiredValues = JSON.parse(condMsg.value);
        if (!Array.isArray(requiredValues)) {
          requiredValues = [condMsg.value];
        }
      } catch (e) {
        requiredValues = [condMsg.value];
      }

      if (requiredValues.includes(fieldValue)) {
        return condMsg.message;
      }
    }
  }

  return currentConfig.customMessage || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Discord
async function sendToDiscord(formData) {
  if (!currentConfig.webhookUrl) {
    return { success: false, message: "Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" };
  }

  const customMessage = getConditionalMessage(formData);
  let payload;

  if (currentConfig.sendAsPlainText) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const plainTextContent = createPlainTextMessage(formData);
    const finalContent = customMessage
      ? `${customMessage}\n\n${plainTextContent}`
      : plainTextContent;

    payload = {
      content: finalContent,
      username: currentConfig.webhookUsername || currentConfig.title,
      avatar_url:
        currentConfig.webhookAvatarUrl ||
        "https://pngimg.com/uploads/discord/discord_PNG3.png",
    };
  } else {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ embed
    const embed = createDiscordEmbed(formData);
    payload = {
      content: customMessage,
      embeds: [embed],
      username: currentConfig.webhookUsername || currentConfig.title,
      avatar_url:
        currentConfig.webhookAvatarUrl ||
        "https://pngimg.com/uploads/discord/discord_PNG3.png",
    };
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π webhook
    const response = await fetch(currentConfig.webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(
        `HTTP ${response.status}: ${errorData.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const customWebhookFields = currentConfig.fields.filter(
      (field) => field.customWebhook && field.customWebhook.enabled
    );

    if (customWebhookFields.length > 0) {
      const customWebhookPromises = [];

      customWebhookFields.forEach((field) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º webhook: –∫–∞—Å—Ç–æ–º–Ω—ã–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–π
        const webhookUrl = field.customWebhook.url || currentConfig.webhookUrl;

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è splitLines –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
        if (
          field.customWebhook.splitLines &&
          (field.type === "textarea" || field.type === "computed") &&
          formData[field.id]
        ) {
          const lines = formData[field.id]
            .split("\n")
            .filter((line) => line.trim() !== "");

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
          lines.forEach((line, index) => {
            const linePayload = {
              content: line,
              username: currentConfig.webhookUsername || currentConfig.title,
              avatar_url:
                currentConfig.webhookAvatarUrl ||
                "https://pngimg.com/uploads/discord/discord_PNG3.png",
            };

            customWebhookPromises.push(
              fetch(webhookUrl, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(linePayload),
              }).catch((error) => {
                console.error(
                  `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${index + 1} –ø–æ–ª—è ${field.label}:`,
                  error
                );
              })
            );
          });
        } else if (field.customWebhook.url) {
          // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π webhook (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω)
          customWebhookPromises.push(
            fetch(webhookUrl, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(payload),
            }).catch((error) => {
              console.error(
                `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π webhook –ø–æ–ª—è ${field.label}:`,
                error
              );
            })
          );
        }
      });

      await Promise.allSettled(customWebhookPromises);
    }

    return { success: true, message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üéâ" };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", error);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
    };
  }
}
